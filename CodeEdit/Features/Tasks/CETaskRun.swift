//
//  CETaskRun.swift
//  CodeEdit
//
//  Created by Tommy Ludwig on 09.06.24.
//

import Foundation

/// Stores the state of a task once it's executed
class CETaskRun: Hashable, ObservableObject {
    static func == (lhs: CETaskRun, rhs: CETaskRun) -> Bool {
        return lhs.output == rhs.output &&
        lhs.status == rhs.status &&
        lhs.errors == rhs.errors &&
        lhs.warnings == rhs.warnings
    }

    func hash(into hasher: inout Hasher) {
        hasher.combine(output)
        hasher.combine(status)
        hasher.combine(errors)
        hasher.combine(warnings)
    }

    /// The current progress of the task.
    @Published private(set) var output: String  = ""

    /// The status of the task.
    @Published private(set) var status: CETaskStatus = .stopped

    /// The errors generated by a task run if any.
    @Published private(set) var errors: Int = 2

    /// The warnings generated by a task if any.
    @Published private(set) var warnings: Int = 2

    /// The name of the associated task.
    let task: CETask

    let shellClient: ShellClient

    init(task: CETask) {
        self.task = task
        shellClient = .live()
    }

    func start() async throws {
        await MainActor.run {
            self.status = .running
        }
        print("RUNNING!")
        print(try? shellClient.run("ls"))
//            .map { output in
//                print(output)
//                await self.updateProgress(output)
//            }
        print("DONE!")
        await MainActor.run {
            if errors > 0 {
                self.status = .failed
            } else {
                self.status = .finished
            }
        }
    }

    /// Updates the progress and output values on the main thread`
    func updateProgress(_ output: String) async {
        await MainActor.run {
            self.output = output
            print(self.output)
        }
    }

    /// Updates the erros and warning counts on the main thread`
    func updateErrorsAndWarnings(errors: Int, warnings: Int) async {
        await MainActor.run {
            self.errors = errors
            self.warnings = warnings
        }
    }
}
